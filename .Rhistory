help(which)
which(data2$Ozone >4)
which(data2$Ozone >31)
which(data2$Ozone >31 AND data2$Temp>90)
which(data2$Ozone >31 & data2$Temp>90)
data3<- which(data2$Ozone >31 & data2$Temp>90)
summary(data3)
view(ozone)
view(data)
data
data$Solar.R[which(data2$Ozone >31 & data2$Temp>90)]
mean(data$Solar.R[which(data2$Ozone >31 & data2$Temp>90)])
mean(data$Solar.R[which(data2$Ozone >=31 & data2$Temp>=90)])
mean(data$Solar.R[which(data$Ozone >=31 & data$Temp>=90)])
mean(data$Solar.R[which(data$Ozone >31 & data$Temp>90)])
mean(data$Temp.R[which(data$Month=6)])
mean(data$Temp.R[which(data$Month==6)])
mean(data$Temp.R[which(data$Month==6)],na.rm=T)
mean(data$Temp[which(data$Month==6)],na.rm=T)
mean(data$Temp[which(data$Month==6)])
max(data$Temp[which(data$Month==6)])
max(data$Ozone[which(data$Month==6)])
mean(data$Ozone[which(data$Month==5)],na.rm=T)
max(data$Ozone[which(data$Month==5)],na.rm=T)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
if(x > 5) {
x <- 0
}
y<-6
if(x > 5) {
x <- 0
}
if(y > 5) {
y <- 0
}
if(y > 5) {
y <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
z <- 10
f(3)
f(3)
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?write.csv
?read.csv
?for
?for
pollutantmean <- function(directory) {
read.table(directory,header = TURE,sep=",",...)
}
pollutantmean(/Users/Tomkat/Desktop/R Hopkins/specdata)
directory="/Users/Tomkat/Desktop/R Hopkins/specdata"
list.files(path=directory)
fil <- list.files(path=directory)
i<-1
paste(directory,"/",fil[i],sep="")
ret <- NULL
for (i in 1 : length(fil)){
ret <- rbind(ret,read.table(paste(directory,"/",fil[i],sep=""),header = TRUE,sep=","))
}
ret <- NULL
for (i in 1 : 2{
ret <- rbind(ret,read.table(paste(directory,"/",fil[i],sep=""),header = TRUE,sep=","))
}
ret <- NULL
for (i in 1 : 2){
ret <- rbind(ret,read.table(paste(directory,"/",fil[i],sep=""),header = TRUE,sep=","))
}
View(ret)
x<-4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(2,4, 6)
rbind(x,y)
z<-rbind(x,y)
class(z)
x <- list(2, "a", "b", TRUE).
x <- list(2, "a", "b", TRUE)
x[1]
z<-x[1]
class(z)
x <- c(3, 5, 1, 10, 12, 6)
x[x <= 5] <- 0
x
getwd()
read.table(hw1_data.csv)
read.table(hw1_data.csv,sep="")
read.table("hw1_data.csv",sep="")
read.table("hw1_data.csv",header=TRUE,sep=",")
abc<-read.table("hw1_data.csv",header=TRUE,sep=",")
?isna(abc)
is.na(abc)
length(abc)
length(which(is.na(abc))
length(which(is.na(abc)))
propmiss(abc)
sum(is.na(abc)
sum(is.na(abc)
sum(is.na(abc))
sum(is.na(abc[1,]))
sum(is.na(abc[,1]))
mean(abc[,1])
mean(abc[,1],is.na=FALSE)
mean(abc[,1],na.rm=TRUE)
abc[,1]
abc[,1[<2]]
abc[,1<2]
abc1<-abc[,1]
abc1[abc1<2]
abc11<-abc1[abc1>31]
abc44<-abc4[abc1>90]
abc4<-abc[,4]
abc44<-abc4[abc1>90]
abc2<-abc[abc1>31]
abc[which(ozone>31 & temp >90),]
abc[which(Ozone>31 & Temp >90),]
abc[which("Ozone">31 & "Temp" >90),]
abc[which("Ozone">31 & "Temp" >90)]
abc[,which("Ozone">31 & "Temp" >90)]
View(abc)
Solar.R$abc[which("Ozone">31 & "Temp" >90)]
abc[which("Ozone">31 & "Temp" >90),]
abc[which("Ozone">31 & "Temp" >90)]
abc[which(abc$Ozone>31 & abc$Temp >90)]
abc[which(abc$Ozone>31 & abc$Temp >90),]
abc[,which(abc$Ozone>31 & abc$Temp >90)]
abc[1,2]
View(abc)
abc[,2]
abc[2,]
abc[which(abc$Ozone>31 & abc$Temp >90),]
abc$Solar.R[which(abc$Ozone>31 & abc$Temp >90),]
abc[which(abc$Ozone>31 & abc$Temp >90),]
newabc<-abc[which(abc$Ozone>31 & abc$Temp >90),]
newabc$Solar.R
mean(newabc$Solar.R, na.rm=TRUE)
abc$Solar.R[which(abc$Ozone>31 & abc$Temp >90),]
newabc<-abc[which(abc$Month==6),]
mean(newabc$Temp, na.rm=TRUE)
newabc<-abc[which(abc$Month==5),]
max(newabc$Ozone, na.rm=TRUE)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
z
?c
z
c(z,555,z)
z*2+100
mysqrt<-sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
x<-4
class(x)
x <- list(2, "a", "b", TRUE).
x <- list(2, "a", "b", TRUE)
x[1]
x
class(x[1])
View(abc)
sum(is.na(abc[,1]))
abc[,1]
abc[1,]
mean(abc[,1],na.rm=TRUE)
newabc<-abc[,which("Ozone">31 & "Temp" >90)]
mean(newabc$Solar.R, na.rm=TRUE)
newabc<-abc[which(abc$Ozone>31 & abc$Temp >90)]
newabc<-abc[which(abc$Ozone>31 & abc$Temp >90),]
View(newabc)
mean(newabc$Solar.R, na.rm=TRUE)
> newabc<-abc[which(abc$Month==6),]
> mean(newabc$Temp, na.rm=TRUE)
newabc<-abc[which(abc$Month==6),]
mean(newabc$Temp, na.rm=TRUE)
newabc<-abc[which(abc$Month==5),]
max(newabc$Ozone, na.rm=TRUE)
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
:
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(o.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect >06
num_vect >=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
c(my_char,"Th")
my_name<-c(my_char,"Th")
my_name
paste(my_name,collapse=" ")
paste("Hello", "world!",sep=" ")
paste(c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
apply(mtcars, 2, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, cyl, avg))
with(mtcars, tapply(mpg, cyl, mean))
mtcars
with(mtcars, tapply(hp, cyl, mean))
mtcars
with(mtcars, tapply(hp, cyl, mean))
datatest<-with(mtcars, tapply(hp, cyl, mean))
datatest[1,]
datatest[,1]
datatest[1,1]
datatest[2,1]
datatest(2,1)
datatest
class(datatest)
datatest[2,1,]
datatest[1,1,]
datatest[1,1,1]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(2)
cachemean(2)
cachemean(c(2,3,4))
makeVector(c(2,3,4)
makeVector(c(2,3,4))
makeVector(c(2,3,4))
makeVector(c(2,3,4))
cachemean(c(2,3,4))
makeCacheMatrix <- function(x = matrix()) {
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(2,3,4),...)
cachemean(c(2,3,4))
cachemean(data.frame(c(2,3,4), c(5,6,7)))
data.frame(c(2,3,4), c(5,6,7))
cachemean((c(2,3,4,5,6,7)))
makeVector(c(2,3,4))
a <- makeVector(c(2,3,4))
a$getmean()
a$get()
?sove
?solve
B = matrix(
c(2, 4, 3, 1, 5, 7, 6, 9),
nrow=3,
ncol=3)
B = matrix(
c(2, 4, 3, 1, 5, 7, 6, 9, 8),
nrow=3,
ncol=3)
B
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
B = matrix(
c(2, 4, 3, 1, 5, 7, 6, 9, 8),
nrow=3,
ncol=3)
a <- makeCacheMatrix(B)
a
a$get()
solve(B)
cacheSolve(a)
B = matrix(
c(2,5,1,3)
nrow=2,
ncol=2)
B = matrix(
c(2, 5,1,3),
nrow=2,
ncol=2)
B
B = matrix(
c(2,1,5,3),
nrow=2,
ncol=2)
B
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
a <- makeCacheMatrix(B)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do:
## The assignment is to write a pair of functions that
## cache the inverse of a matrix.
## `makeCacheMatrix`: This is the first function. It creates a special "matrix" object
## that can cache its inverse.
## `cacheSolve`: This ist the second function. It computes the inverse of the
## matrix returned by `makeCacheMatrix`. If the inverse has
## already been calculated (and the matrix has not changed), then
## `cacheSolve` retrieve the inverse from the cache.
## Write a short comment describing this function:
## The first function, 'makeCacheMatrix' creates a matrix, which is
## a list containing a function to
##1.  set the value of the matrix
##2.  get the value of the matrix
##3.  set the value of the inverse
##4.  get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function:
## The function 'cacheSolve' calculates the inverse of the matrix
## created with the function 'makeCacheMatrix'. However, it first checks to see if the
## inverse has already been calculated. If so, it get`s the inverse from the
## cache and skips the computation. Otherwise, it calculates the inverse of
## the matrix and sets the value of the inverse in the cache via the 'setsolve'
## function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
## This is an example to test the functions:
B = matrix(
c(2,1,5,3),
nrow=2,
ncol=2)
B
a <- makeCacheMatrix(B)
a
cacheSolve(a)
## This is an example matrix to test the functions:
B = matrix(
c(2,1,5,3),
nrow=2,
ncol=2)
B
A <- makeCacheMatrix(B)
cacheSolve(A)
